package simpl.translation.api;

import java.util.HashSet;
import java.util.Set;
import java.util.Collection;


/**
 * This is the base class for any Translator that needs to aggregate dependencies. 
 * It does some of the common work for collecting dependencies, 
 * implementors simply need to implement "AggregateDependencies" to grab dependencies 
 * generated by the translator. 
 * 
 * MetaInformation may translate any number of Parameters. Each parameter creates a dependency...
 * Within a MetaInformation translator's "AggregateDependencies()", 
 * one should call each of the ParameterTranslator's getDependencies() method.
 * @author Tom
 *
 */
public abstract class BaseTranslator implements DependencyTracker {
	/**
	 * Holds onto the dependencies tracked by this translator.
	 */
	private Set<String> trackedDependencies = new HashSet<String>(); 
	
	@Override
	/**
	 * Adds a dependency to this translator.
	 * @param dependency the full package/path name of the dependency
	 */
	public void addDependency(String dependency) {
		this.trackedDependencies.add(dependency);
	}

	/**
	 * Adds a collection of dependencies to the translator.
	 * @param dependencies A collection of full package/path names to dependencies
	 */
	@Override
	public void addDependencies(Collection<String> dependencies) {
		this.trackedDependencies.addAll(dependencies);
	}
	
	/**
	 * AggregateDependencies collects all of the dependencies that
	 * translators invoked within a given translator have accrued.
	 * 
	 * For Example:
	 * MetaInformation may translate any number of Parameters. Each parameter creates a dependency...
	 * Within a MetaInformation translator's "AggregateDependencies()", 
	 * one should call each of the ParameterTranslator's getDependencies() method.
	 */
	public abstract Set<String> aggregateDependencies();

	@Override
	/**
	 * Gets all of the dependencies for this translator; 
	 * It adds all of the dependencies tracked to the results of aggregateDependencies(), 
	 * then returns the depenendency set.
	 * 
	 * This call is mutable (because it makes the API's a bit cleaner), 
	 * Calling this call immediately after a call to getDependencies() will return an empty set.
	 */
	public Set<String> getDependencies() {
		this.trackedDependencies.addAll(aggregateDependencies());
		Set<String> toReturn = new HashSet<String>();
		toReturn.addAll(this.trackedDependencies);
		
		//reset this trackedDependencies for the next getDependency() call. 
		this.trackedDependencies = new HashSet<String>();
		
		// return the dependencies we had. 
		return toReturn;
	}
}
